/**
 * auto generated by graphql-codegen
 * DO NOT EDIT THIS FILE BY HAND
 */

type Maybe<T> = T | null
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  DateTime: any
}

/** An event venue */
export type EventVenue = {
  city: Scalars['String']
  country: Scalars['String']
  lat: Scalars['Float']
  lon: Scalars['Float']
  name: Scalars['String']
  street: Scalars['String']
}

/** A meetup organizer */
export type Organizer = {
  description: Scalars['String']
  name: Scalars['String']
  profileImageUrl: Scalars['String']
  twitterName: Scalars['String']
}

/** The query root of Paderborn.js GraphQL interface */
export type Query = {
  /** Return a list of meetup organizers */
  organizers: Array<Organizer>
  /** Return a list of upcoming events */
  upcomingEvents: Array<UpcomingEvent>
}

/** A speaker */
export type Speaker = {
  avatarUrl: Scalars['String']
  name: Scalars['String']
  occupation: Scalars['String']
  socialName?: Maybe<Scalars['String']>
  socialUrl?: Maybe<Scalars['String']>
}

/** A talk */
export type Talk = {
  date: Scalars['DateTime']
  description: Scalars['String']
  isLightningTalk: Scalars['Boolean']
  labels: Array<Scalars['String']>
  speaker: Speaker
  title: Scalars['String']
}

/** An upcoming meetup event */
export type UpcomingEvent = {
  date: Scalars['DateTime']
  goingCount: Scalars['Int']
  url: Scalars['String']
  venue: EventVenue
  talks: Array<Talk>
}
import { ContextType } from '../utils/createContext'

import {
  GraphQLResolveInfo,
  GraphQLScalarType,
  GraphQLScalarTypeConfig,
} from 'graphql'

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult

export type StitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>
}

export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs>
  resolve?: SubscriptionResolveFn<TResult, TParent, TContext, TArgs>
}

export type SubscriptionResolver<
  TResult,
  TParent = {},
  TContext = {},
  TArgs = {}
> =
  | ((
      ...args: any[]
    ) => SubscriptionResolverObject<TResult, TParent, TContext, TArgs>)
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes>

export type NextResolverFn<T> = () => Promise<T>

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {}
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>

export interface DateTimeScalarConfig
  extends GraphQLScalarTypeConfig<Scalars['DateTime'], any> {
  name: 'DateTime'
}

export type EventVenueResolvers<
  Context = ContextType,
  ParentType = EventVenue
> = {
  city?: Resolver<Scalars['String'], ParentType, Context>
  country?: Resolver<Scalars['String'], ParentType, Context>
  lat?: Resolver<Scalars['Float'], ParentType, Context>
  lon?: Resolver<Scalars['Float'], ParentType, Context>
  name?: Resolver<Scalars['String'], ParentType, Context>
  street?: Resolver<Scalars['String'], ParentType, Context>
}

export type OrganizerResolvers<
  Context = ContextType,
  ParentType = Organizer
> = {
  description?: Resolver<Scalars['String'], ParentType, Context>
  name?: Resolver<Scalars['String'], ParentType, Context>
  profileImageUrl?: Resolver<Scalars['String'], ParentType, Context>
  twitterName?: Resolver<Scalars['String'], ParentType, Context>
}

export type QueryResolvers<Context = ContextType, ParentType = Query> = {
  organizers?: Resolver<Array<Organizer>, ParentType, Context>
  upcomingEvents?: Resolver<Array<UpcomingEvent>, ParentType, Context>
}

export type SpeakerResolvers<Context = ContextType, ParentType = Speaker> = {
  avatarUrl?: Resolver<Scalars['String'], ParentType, Context>
  name?: Resolver<Scalars['String'], ParentType, Context>
  occupation?: Resolver<Scalars['String'], ParentType, Context>
  socialName?: Resolver<Maybe<Scalars['String']>, ParentType, Context>
  socialUrl?: Resolver<Maybe<Scalars['String']>, ParentType, Context>
}

export type TalkResolvers<Context = ContextType, ParentType = Talk> = {
  date?: Resolver<Scalars['DateTime'], ParentType, Context>
  description?: Resolver<Scalars['String'], ParentType, Context>
  isLightningTalk?: Resolver<Scalars['Boolean'], ParentType, Context>
  labels?: Resolver<Array<Scalars['String']>, ParentType, Context>
  speaker?: Resolver<Speaker, ParentType, Context>
  title?: Resolver<Scalars['String'], ParentType, Context>
}

export type UpcomingEventResolvers<
  Context = ContextType,
  ParentType = UpcomingEvent
> = {
  date?: Resolver<Scalars['DateTime'], ParentType, Context>
  goingCount?: Resolver<Scalars['Int'], ParentType, Context>
  url?: Resolver<Scalars['String'], ParentType, Context>
  venue?: Resolver<EventVenue, ParentType, Context>
  talks?: Resolver<Array<Talk>, ParentType, Context>
}

export type Resolvers<Context = ContextType> = {
  DateTime?: GraphQLScalarType
  EventVenue?: EventVenueResolvers<Context>
  Organizer?: OrganizerResolvers<Context>
  Query?: QueryResolvers<Context>
  Speaker?: SpeakerResolvers<Context>
  Talk?: TalkResolvers<Context>
  UpcomingEvent?: UpcomingEventResolvers<Context>
}

/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<Context = ContextType> = Resolvers<Context>
