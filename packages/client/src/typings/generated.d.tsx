/**
 * auto generated by graphql-codegen
 * DO NOT EDIT THIS FILE BY HAND
 */

type Maybe<T> = T | null
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  DateTime: any
}

/** An event venue */
export type EventVenue = {
  city: Scalars['String']
  country: Scalars['String']
  lat: Scalars['Float']
  lon: Scalars['Float']
  name: Scalars['String']
  street: Scalars['String']
}

/** A meetup organizer */
export type Organizer = {
  description: Scalars['String']
  name: Scalars['String']
  profileImageUrl: Scalars['String']
  twitterName: Scalars['String']
}

/** The query root of Paderborn.js GraphQL interface */
export type Query = {
  /** Return a list of meetup organizers */
  organizers: Array<Organizer>
  /** Return a list of upcoming events */
  upcomingEvents: Array<UpcomingEvent>
}

/** A speaker */
export type Speaker = {
  avatarUrl: Scalars['String']
  name: Scalars['String']
  occupation: Scalars['String']
  socialName?: Maybe<Scalars['String']>
  socialUrl?: Maybe<Scalars['String']>
}

/** A talk */
export type Talk = {
  date: Scalars['DateTime']
  description: Scalars['String']
  isLightningTalk: Scalars['Boolean']
  labels: Array<Scalars['String']>
  speaker: Speaker
  title: Scalars['String']
}

/** An upcoming meetup event */
export type UpcomingEvent = {
  date: Scalars['DateTime']
  goingCount: Scalars['Int']
  url: Scalars['String']
  venue: EventVenue
  talks: Array<Talk>
}
export type GetEventsQueryVariables = {}

export type GetEventsQuery = { __typename?: 'Query' } & {
  upcomingEvents: Array<
    { __typename?: 'UpcomingEvent' } & Pick<
      UpcomingEvent,
      'date' | 'goingCount' | 'url'
    > & {
        venue: { __typename?: 'EventVenue' } & Pick<
          EventVenue,
          'city' | 'country' | 'lat' | 'lon' | 'name' | 'street'
        >
        talks: Array<
          { __typename?: 'Talk' } & Pick<
            Talk,
            'title' | 'description' | 'date' | 'isLightningTalk' | 'labels'
          > & {
              speaker: { __typename?: 'Speaker' } & Pick<
                Speaker,
                'name' | 'occupation' | 'socialName' | 'socialUrl' | 'avatarUrl'
              >
            }
        >
      }
  >
}

export type GetOrganizersQueryVariables = {}

export type GetOrganizersQuery = { __typename?: 'Query' } & {
  organizers: Array<
    { __typename?: 'Organizer' } & Pick<
      Organizer,
      'description' | 'name' | 'twitterName' | 'profileImageUrl'
    >
  >
}

import gql from 'graphql-tag'
import * as ReactApolloHooks from 'react-apollo-hooks'

export const GetEventsDocument = gql`
  query GetEvents {
    upcomingEvents {
      date
      goingCount
      url
      venue {
        city
        country
        lat
        lon
        name
        street
      }
      talks {
        title
        description
        date
        speaker {
          name
          occupation
          socialName
          socialUrl
          avatarUrl
        }
        isLightningTalk
        labels
      }
    }
  }
`

export function useGetEventsQuery(
  baseOptions?: ReactApolloHooks.QueryHookOptions<GetEventsQueryVariables>
) {
  return ReactApolloHooks.useQuery<GetEventsQuery, GetEventsQueryVariables>(
    GetEventsDocument,
    baseOptions
  )
}
export const GetOrganizersDocument = gql`
  query GetOrganizers {
    organizers {
      description
      name
      twitterName
      profileImageUrl
    }
  }
`

export function useGetOrganizersQuery(
  baseOptions?: ReactApolloHooks.QueryHookOptions<GetOrganizersQueryVariables>
) {
  return ReactApolloHooks.useQuery<
    GetOrganizersQuery,
    GetOrganizersQueryVariables
  >(GetOrganizersDocument, baseOptions)
}
